#!/usr/bin/env ruby

require "bundler/setup"
require "html2mail"
require 'gli'

include GLI::App

program_desc 'Convert html file with images to e-mail'
version Html2mail::VERSION

flag [:smtp_address], default_value: nil, desc: "SMTP server address"
flag [:smtp_user_name], default_value: nil, desc: "SMTP server user name (email address)"
flag [:smtp_password], default_value: nil, desc: "SMTP server user password"
switch [:smtp_starttls], default_value: true, desc: "Enables SMTP/TLS (STARTTLS)"

config_file '.html2mail.yml'

pre do |global, command, options, args|
  Mailer2.delivery_method = :smtp
  Mailer2.smtp_settings = {:address => global[:smtp_address],
                           :user_name => global[:smtp_user_name],
                           :password => global[:smtp_password],
                           :enable_starttls_auto => global[:smtp_starttls]}
end

desc 'Sent email from html to given adress'
arg 'files', multiple: true, desc: "HTML-files to process"
command :send do |c|
  c.flag [:t, :to], default_value: nil
  c.flag [:f, :from], default_value: Mailer2.smtp_settings[:user_name]
  c.flag [:s, :subj], default_value: nil

  c.action do |global_options, options, args|
    args.each do |f|
      STDERR.puts "Start mail processing"

      m= Mailer2.mail2 f, options[:to], options[:subj], options[:from] || global_options[:smtp_user_name]
      m.deliver_now

      STDERR.puts "Done"
    end
  end
end


desc 'Convert HTML file with images to eml'
arg 'files', multiple: true, desc: "HTML-files to process"
command :convert do |c|
  c.flag [:t, :to], default_value: ''
  c.switch [:s, :stdout], default_value: false
  c.flag [:o, :output], default_value: nil

  c.action do |global_options, options, args|
    args.each do |f|
      m = Mailer2.mail2 f, options[:to], options[:subj], options[:from] || global_options[:smtp_user_name]

      html = m.to_s.html_safe

      if options[:stdout]
        STDOUT.puts html
      else
        if options[:output].present?
          out = options[:output]
        else
          out = File.join(File.dirname(f), File.basename(f, File.extname(f)) + '.eml')
        end

        STDERR.puts "Out: #{out}"
        # raise "File already exists: #{out}" if File.exists?(out)
        File.open(out, 'w') { |fw| fw.write(html) }
      end
    end
    STDERR.puts "Done"
  end
end

desc 'Convert HTML with premailer to more mail software compatible (converts css to style attributes)'
arg 'files', multiple: true, desc: "HTML-files to process"
command :prepare do |c|
  c.switch [:s, :stdout], default_value: false
  c.flag [:o, :output], default_value: nil
  c.flag [:premailer_prefix], default_value: 'premailed_'
  c.flag [:premailer_suffix], default_value: ''
  c.flag [:premailer_dir], default_value: 'premailed'

  c.action do |global_options, options, args|
    STDERR.puts "Processing: #{args.join(', ')}"
    args.each do |f|
      html = Premailer.new(f, :warn_level => Premailer::Warnings::SAFE).to_inline_css.html_safe

      if options[:stdout]
        STDOUT.puts html
      else
        if options[:output].present?
          out = options[:output]
        else
          premailed_dir = File.join(File.dirname(f), options[:premailer_dir])
          FileUtils.mkdir_p(premailed_dir)
          out = File.join(premailed_dir, options[:premailer_prefix] + File.basename(f, File.extname(f)) + options[:premailer_suffix] + File.extname(f))
        end

        STDERR.puts "#{File.basename(f)} --> #{File.join options[:premailer_dir], File.basename(out)}"
        # raise "File already exists: #{out}" if File.exists?(out)
        File.open(out, 'w') { |fw| fw.write(html) }
      end
    end
    STDERR.puts "Done"
  end
end


desc 'Send html-letter(s) to recipients'
arg 'files', multiple: true, desc: "HTML-files to process"
command :bulksend do |c|
  c.flag [:csv_email_column], default_value: 'email', type: String, desc: 'Colum name in csv with email addresses'
  c.flag [:l, :list], default_value: nil, required: true, desc: "File with recipents (.txt - one email per line; .csv - with column named 'email')"
  c.switch [:r, :shuffle], default_value: true, desc: "Send emails to recipients in random order"
  c.flag [:t, :timeout], default_value: 1.0, type: Float, desc: "Wait given seconds between sending mails"
  c.flag [:s, :subj], default_value: nil, desc: "Subject for mail. If blank then use <title> tag or html-file name"
  # c.flag [:p, :pretend], default_value: nil, desc: "Run but do not make any real actions"
  c.flag [:f, :from], default_value: Mailer2.smtp_settings[:user_name]

  c.action do |global_options, options, args|
    file_type = File.extname(options[:list]).gsub('.', '').strip.downcase

    case file_type
      when 'csv'
        require 'csv'

        rows = CSV.table(options[:list], skip_blanks: true)
        total_count = rows.size
        email_column = options[:csv_email_column].to_sym

        STDERR.puts "Warning: shuffle option not yer implemented for CSV" if options[:shuffle]

        rows.each_with_index do |row, index|
          args.each do |f|
            email = row[email_column]
            Mailer2.mail2(f, email, options[:subj], options[:from] || global_options[:smtp_user_name]).deliver_now
            STDERR.puts "(#{index+1}/#{total_count}) Email '#{File.basename(f)}' sent to #{email}"
            sleep(options[:timeout]) if options[:timeout].present?
          end
        end
      else
        # STDERR.puts
        lines = File.readlines(options[:list])
        lines = lines.reject { |x| x.strip.blank? }
        lines = lines.shuffle if options[:shuffle]
        total_count = lines.size
        lines.each_with_index do |line, index|
          email = line.strip
          if email.present?
            args.each do |f|
              Mailer2.mail2(f, email, options[:subj], options[:from] || global_options[:smtp_user_name]).deliver_now
              # STDERR.print '.'
              STDERR.puts "(#{index+1}/#{total_count}) Email '#{File.basename(f)}' sent to #{email}"

              sleep(options[:timeout]) if options[:timeout].present?
            end
          end
        end
    end

    STDERR.puts "Done"
  end
end

exit run(ARGV)
